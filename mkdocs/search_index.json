{
    "docs": [
        {
            "location": "/", 
            "text": "ICE or ITB Chess E-learning is a platform to learn chess based on challenge generated by AI.\n\n\nYou have you to resolve some challenge to gain points. Amount of points gained depends on level of the challenge.\nFor example \neasy level\n, you gain 3 points, \nmedium level\n, you gain 5 points.\nAcumulate all the points to get the badge to show how talented/strong you are in chess in this E-learning.  \n\n\n\n\nQuote\n\n\n\"The chessboard is the world, the pieces are the phenomena of the Universe,\nthe rules of the game are what we call the laws of Nature and the player on the other side is hidden from us\"\n\n\n- Thomas Huxley -", 
            "title": "Home"
        }, 
        {
            "location": "/preface/", 
            "text": "Preface\n\n\nBackground\n\n\nITB has vidyanusa as e-learning platform for education, mainly for mathematics for now.\nIn order to expand the subjects served in vidyanusa, ITB try to implement in chess.\n\n\nChess chosen due to lots of potential research in chess. This Thesis become the pioneer of this platform,\nto build entire e-learning as research ground. And first research conducted are generated challenge by AI.\n\n\nGoal\n\n\nThe main goal of this E-leaning is to make a learning platform for chess. And as a thesis, the e-learning serve as a research ground to implement idea for research. In this thesis, author made challenge generated by AI.\n\n\nLimitation\n\n\nThis E-learning platform have some limitation due to its main purpose is for accomplish the research of author thesis.\nSome known limitation are:\n\n\n\n\nOnly in Web, and\n\n\nChallenge is a puzzle for several moves to finish/solve.\n\n\n\n\nMethods\n\n\nThe main function in this E-learning is in the puzzle-rank menu, where the challenge generated by AI.\nFor AI to generate a challenge, AI have to do some grabbing puzzle from database or online API then check and decide the puzzle level in order to make the puzzle as a challenge in the E-learning. All procedure made by author through  \nobservation method\n.", 
            "title": "Preface"
        }, 
        {
            "location": "/preface/#preface", 
            "text": "", 
            "title": "Preface"
        }, 
        {
            "location": "/preface/#background", 
            "text": "ITB has vidyanusa as e-learning platform for education, mainly for mathematics for now.\nIn order to expand the subjects served in vidyanusa, ITB try to implement in chess.  Chess chosen due to lots of potential research in chess. This Thesis become the pioneer of this platform,\nto build entire e-learning as research ground. And first research conducted are generated challenge by AI.", 
            "title": "Background"
        }, 
        {
            "location": "/preface/#goal", 
            "text": "The main goal of this E-leaning is to make a learning platform for chess. And as a thesis, the e-learning serve as a research ground to implement idea for research. In this thesis, author made challenge generated by AI.", 
            "title": "Goal"
        }, 
        {
            "location": "/preface/#limitation", 
            "text": "This E-learning platform have some limitation due to its main purpose is for accomplish the research of author thesis.\nSome known limitation are:   Only in Web, and  Challenge is a puzzle for several moves to finish/solve.", 
            "title": "Limitation"
        }, 
        {
            "location": "/preface/#methods", 
            "text": "The main function in this E-learning is in the puzzle-rank menu, where the challenge generated by AI.\nFor AI to generate a challenge, AI have to do some grabbing puzzle from database or online API then check and decide the puzzle level in order to make the puzzle as a challenge in the E-learning. All procedure made by author through   observation method .", 
            "title": "Methods"
        }, 
        {
            "location": "/course/course/", 
            "text": "As this platform is E-learning, a need for course for chess, at least in basic level is a must.\nWe provide variety for course in this e-learning, for basic rules of chess.\n\n\n \n1\n\n\nAll Started Here\n\n\nA brief history of chess and some basic knowledge about the chess board.\n\n\nMovements\n\n\nLearn movements of every chess pieces, and simulate in a board.\n\n\nEn-Passant\n\n\nThis rule is somehow in Indonesia is an unusual rule. Many street chess player in Indonesia sometimes ignore this rule. But ofcourse it has to be introduced and studied.\n\n\nCastling\n\n\nA basic movement for securing the king in a chess game.\n\n\nEnd Game\n\n\nLast step for course is to know how a game can end, how to determine which color/side is winner, or how to know if the game end with draw/stalemate.\n\n\n\n\n\n\n\n\n\n\nImage from wikipedia", 
            "title": "Course"
        }, 
        {
            "location": "/course/course/#all-started-here", 
            "text": "A brief history of chess and some basic knowledge about the chess board.", 
            "title": "All Started Here"
        }, 
        {
            "location": "/course/course/#movements", 
            "text": "Learn movements of every chess pieces, and simulate in a board.", 
            "title": "Movements"
        }, 
        {
            "location": "/course/course/#en-passant", 
            "text": "This rule is somehow in Indonesia is an unusual rule. Many street chess player in Indonesia sometimes ignore this rule. But ofcourse it has to be introduced and studied.", 
            "title": "En-Passant"
        }, 
        {
            "location": "/course/course/#castling", 
            "text": "A basic movement for securing the king in a chess game.", 
            "title": "Castling"
        }, 
        {
            "location": "/course/course/#end-game", 
            "text": "Last step for course is to know how a game can end, how to determine which color/side is winner, or how to know if the game end with draw/stalemate.      Image from wikipedia", 
            "title": "End Game"
        }, 
        {
            "location": "/course/exercise/", 
            "text": "After learn some basic chess, it is a good time to hone your skill with some exercise. In this platform there are 3 exercises, there are:\n\n\nThoroughness Exercise\n\n\n\n\nHere in Thoroughness Exercise you must scan/see all pieces in the board. and check every possibilities from ever pieces, not only yours.\n\n\nYou can see your pieces first, and check every legal moves from every pieces, what the pieces attack and guard. Then check enemy's pieces attack/guard too.\n\n\nLimited Pieces\n\n\n\n\n\n\n\n\n1 Knight 1 White Bishop\n\n\n1 Queen\n\n\n2 Bishops\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis exercise is to focus on how we can finish (checkmate) the game with only limited pieces. For example, checkmate with only 2 Knight is impossible, then the only possible is to get 1 bishop and 1 knight. there are compiled with least pieces formation you can do to make a checkmate.\n\n\nSolve Puzzle\n\n\n\n\nAfter learn some about chess, and perhaps you already played chess for years. Now go solve some puzzle.\n\n\nPuzzle provided was randomly generated. Puzzle is not for 2 or 3 moves checkmate. It is about how to get advantage from the situation.", 
            "title": "Exercise"
        }, 
        {
            "location": "/course/exercise/#thoroughness-exercise", 
            "text": "Here in Thoroughness Exercise you must scan/see all pieces in the board. and check every possibilities from ever pieces, not only yours.  You can see your pieces first, and check every legal moves from every pieces, what the pieces attack and guard. Then check enemy's pieces attack/guard too.", 
            "title": "Thoroughness Exercise"
        }, 
        {
            "location": "/course/exercise/#limited-pieces", 
            "text": "1 Knight 1 White Bishop  1 Queen  2 Bishops            This exercise is to focus on how we can finish (checkmate) the game with only limited pieces. For example, checkmate with only 2 Knight is impossible, then the only possible is to get 1 bishop and 1 knight. there are compiled with least pieces formation you can do to make a checkmate.", 
            "title": "Limited Pieces"
        }, 
        {
            "location": "/course/exercise/#solve-puzzle", 
            "text": "After learn some about chess, and perhaps you already played chess for years. Now go solve some puzzle.  Puzzle provided was randomly generated. Puzzle is not for 2 or 3 moves checkmate. It is about how to get advantage from the situation.", 
            "title": "Solve Puzzle"
        }, 
        {
            "location": "/course/challenge/", 
            "text": "Also before Puzzle-Rank, in this platform, we provide some challenge to solve, like handicapped match or custom game. Some of the challenges are:\n\n\n\n\n\n\nEasy AI without Queen\n\n    Play against easy AI. And the AI start without Queen.  \n\n\n  \n\n\n\n\n\n\nQueen vs Full Pawns\n\n    You start with 1 Queen and a Pawn for more advantage, And AI start with full Pawn.  \n\n\n  \n\n\n\n\n\n\nRook Battle with Pawn Advantage\n\n    You start with a Rook and a Pawn, And AI start with a Rook.", 
            "title": "Challenge"
        }, 
        {
            "location": "/puzzle-rank/", 
            "text": "Puzzle Rank\n\n\n\n\nWhat is it\n\n\nThis feature is the main feature of this platform. To gain badges as many as student can by solves as many challenge as student can.\n\n\nA challenge is grabbed from database / 3rd parties API, then decided if its good enough to be a challenge and categorized (level) how hard is it. All process done by system.\n\n\nChallenges Concept\n\n\nChallenges categorized in 5 Level. Each level have different points. A student can take as many challenge as student can, and accumulated points to get a badges.\n\n\nHere table for map the level and points gain:\n\n\n\n\n\n\n\n\nLevel\n\n\nPoints\n\n\n\n\n\n\n\n\n\n\nvery easy\n\n\n1\n\n\n\n\n\n\neasy\n\n\n3\n\n\n\n\n\n\nmedium\n\n\n5\n\n\n\n\n\n\nhard\n\n\n7\n\n\n\n\n\n\nvery hard\n\n\n10\n\n\n\n\n\n\n\n\nBadges System\n\n\nBadges system in this platform is just a label of how much points gained. For example, after 32 points, student can get \nknight\n badge. Here are table for badges compare how much points should a student accumulated:\n\n\n\n\n\n\n\n\nBadge\n\n\nMinimum Points\n\n\n\n\n\n\n\n\n\n\npawn\n\n\n0\n\n\n\n\n\n\nknight\n\n\n32\n\n\n\n\n\n\nrook\n\n\n128\n\n\n\n\n\n\nqueen\n\n\n256\n\n\n\n\n\n\nking\n\n\n512\n\n\n\n\n\n\n\n\n*student automatically got pawn badge as a start.\n\n\nAuto Insert Challenge\n\n\nA challenge is a puzzle that can be found in a database or an API from a website, in this case for this platform, platform grab from \nhttp://chessblunders.org/\n.\n\n\nAfter get a puzzle, system decide if its a good puzzle to become a challenge or not by these rules:\n\n\n\n\nIf it end with checkmate is \ngood\n,\n\n\nIf it end with not better material counts then its \nnot good\n. Different material sum between each side in the end of moves must be better than the first time,\n\n\nIf it end without a hit then its \nnot good\n. For make a challenge vividly make sense for student. It must be end with a \"final\" hitm,\n\n\nFinally if all above condition passed, then the puzzle is \ngood\n.\n\n\n\n\nAfter puzzle decided is good for a challenge, then classify the puzzle to which level it falls on. Platform decide it with Classification Machine Learning. Several Algorithm used to classify the puzzle and get \nmean\n (polls) of results to decide which level is the challenge/puzzle is. Algorithms used are:\n\n\n\n\nK-Nearest Neighbors\n, with K 3\n\n\nNaivebayes\n\n\nSVC\n with linier system and cost = 1000\n\n\n\n\nSimple Pseudo Code\n\n\nHere is simple pseudo code of system from grab puzzle until classify a level for a challenge/puzzle:\n\n\nfunction\n \nstoreIntoDB\n(\npuzzle\n,\n \nlevel\n)\n\n    \n...\n \nstore\n \ninto\n \nDB\n \n...\n\n\n\nfunction\n \ngetPiecesValue\n(\nposition\n,\n \ncolor\n)\n\n    \n/*\n\n     \n*\n \nsum\n \nall\n \npieces\n \nvalue\n \nfro\n \na\n \ncolor\n \nin\n \na\n \nposition\n \nbased\n \non\n,\n\n     \n*\n \nexp\n:\n \nhttps\n:\n//en.wikipedia.org/wiki/Chess_piece_relative_value\n\n     \n*/\n\n    \nreturn\n \n(\nsum\n)\n\n\n\nfunction\n \nisGoodPuzzle\n(\npuzzle\n)\n\n    \n/*\n\n     \n*\n \ncheck\n \nif\n \nit\n \nis\n:\n\n     \n*\n \n1\n.\n \na\n \ncheckmate\n \nor\n\n     \n*\n \n2\n.\n \nlast\n \nposition\n \nis\n \nbetter\n \nmaterial\n \nthan\n \nfirst\n \nposition\n,\n \nand\n\n     \n*\n \n3\n.\n \nlast\n \nmove\n \nis\n \na\n \nhit\n\n     \n*\n\n     \n*\n \nin\n \nquery\n:\n \nisCheckmate\n()\n \nor\n \n(\n \nmaterialDiffs\n()\n \nand\n \nisLastMoveAHit\n()\n \n)\n\n     \n*\n\n     \n*\n \nreturn\n \ntrue\n \nif\n \none\n \nof\n \nabove\n \nreasons\n \nis\n \ntrue\n \nif\n \nordered\n\n     \n*\n \nreturn\n \nfalse\n \nif\n \nany\n \nof\n \nabove\n \nreasons\n \nnot\n \nfound\n\n     \n*/\n\n\n\nfunction\n \nrun\n()\n\n    \n/*\n\n     \n*\n \nclassifier\n,\n \nsample\n \nuse\n \nperft\n \nresults\n \nand\n \ndepth\n \nof\n \nmoves\n \nlength\n\n     \n*\n \nclassifier\n \nare\n \nKNearestNeighbors\n-\n3\n,\n \nnaiveBayes\n,\n \nsvc\n \nlinier\n \n1000\n\n     \n*/\n\n    \nclassifier\n \n:=\n \ngetAllClassifier\n()\n\n    \nclassifier\n.\ntrain\n(\ngetClassifierSamples\n())\n\n\n    \n/*\n\n     \n*\n \nget\n \npuzzle\n \nfrom\n \nDB\n \n/\n \nonline\n\n     \n*/\n\n    \npuzzle\n \n:=\n \ngrabRandomPuzzle\n()\n\n\n    \n/*\n\n     \n*\n \nget\n \nmedian\n \nresults\n \nfrom\n \nall\n \nclassifier\n,\n \neither\n \nis\n \neasy\n \n/\n \nmedium\n \n/\n \nhard\n\n     \n*/\n\n    \nif\n \nisGoodPuzzle\n(\npuzzle\n)\n\n        \nmedianResult\n \n:=\n \nclassifier\n.\npredict\n(\npuzzle\n)\n.\nmedian\n()\n\n        \nstoreIntoDB\n(\npuzzle\n,\n \nmedianResult\n)", 
            "title": "Puzzle Rank"
        }, 
        {
            "location": "/puzzle-rank/#puzzle-rank", 
            "text": "", 
            "title": "Puzzle Rank"
        }, 
        {
            "location": "/puzzle-rank/#what-is-it", 
            "text": "This feature is the main feature of this platform. To gain badges as many as student can by solves as many challenge as student can.  A challenge is grabbed from database / 3rd parties API, then decided if its good enough to be a challenge and categorized (level) how hard is it. All process done by system.", 
            "title": "What is it"
        }, 
        {
            "location": "/puzzle-rank/#challenges-concept", 
            "text": "Challenges categorized in 5 Level. Each level have different points. A student can take as many challenge as student can, and accumulated points to get a badges.  Here table for map the level and points gain:     Level  Points      very easy  1    easy  3    medium  5    hard  7    very hard  10", 
            "title": "Challenges Concept"
        }, 
        {
            "location": "/puzzle-rank/#badges-system", 
            "text": "Badges system in this platform is just a label of how much points gained. For example, after 32 points, student can get  knight  badge. Here are table for badges compare how much points should a student accumulated:     Badge  Minimum Points      pawn  0    knight  32    rook  128    queen  256    king  512     *student automatically got pawn badge as a start.", 
            "title": "Badges System"
        }, 
        {
            "location": "/puzzle-rank/#auto-insert-challenge", 
            "text": "A challenge is a puzzle that can be found in a database or an API from a website, in this case for this platform, platform grab from  http://chessblunders.org/ .  After get a puzzle, system decide if its a good puzzle to become a challenge or not by these rules:   If it end with checkmate is  good ,  If it end with not better material counts then its  not good . Different material sum between each side in the end of moves must be better than the first time,  If it end without a hit then its  not good . For make a challenge vividly make sense for student. It must be end with a \"final\" hitm,  Finally if all above condition passed, then the puzzle is  good .   After puzzle decided is good for a challenge, then classify the puzzle to which level it falls on. Platform decide it with Classification Machine Learning. Several Algorithm used to classify the puzzle and get  mean  (polls) of results to decide which level is the challenge/puzzle is. Algorithms used are:   K-Nearest Neighbors , with K 3  Naivebayes  SVC  with linier system and cost = 1000", 
            "title": "Auto Insert Challenge"
        }, 
        {
            "location": "/puzzle-rank/#simple-pseudo-code", 
            "text": "Here is simple pseudo code of system from grab puzzle until classify a level for a challenge/puzzle:  function   storeIntoDB ( puzzle ,   level ) \n     ...   store   into   DB   ...  function   getPiecesValue ( position ,   color ) \n     /* \n      *   sum   all   pieces   value   fro   a   color   in   a   position   based   on , \n      *   exp :   https : //en.wikipedia.org/wiki/Chess_piece_relative_value \n      */ \n     return   ( sum )  function   isGoodPuzzle ( puzzle ) \n     /* \n      *   check   if   it   is : \n      *   1 .   a   checkmate   or \n      *   2 .   last   position   is   better   material   than   first   position ,   and \n      *   3 .   last   move   is   a   hit \n      * \n      *   in   query :   isCheckmate ()   or   (   materialDiffs ()   and   isLastMoveAHit ()   ) \n      * \n      *   return   true   if   one   of   above   reasons   is   true   if   ordered \n      *   return   false   if   any   of   above   reasons   not   found \n      */  function   run () \n     /* \n      *   classifier ,   sample   use   perft   results   and   depth   of   moves   length \n      *   classifier   are   KNearestNeighbors - 3 ,   naiveBayes ,   svc   linier   1000 \n      */ \n     classifier   :=   getAllClassifier () \n     classifier . train ( getClassifierSamples ()) \n\n     /* \n      *   get   puzzle   from   DB   /   online \n      */ \n     puzzle   :=   grabRandomPuzzle () \n\n     /* \n      *   get   median   results   from   all   classifier ,   either   is   easy   /   medium   /   hard \n      */ \n     if   isGoodPuzzle ( puzzle ) \n         medianResult   :=   classifier . predict ( puzzle ) . median () \n         storeIntoDB ( puzzle ,   medianResult )", 
            "title": "Simple Pseudo Code"
        }, 
        {
            "location": "/about/", 
            "text": "Author\n\n\nryan hs \nmr.ryansilalahi@gmail.com\n\n\nGet Thesis Document\n\n\nAs this thesis is for my master degree in ITB, you can read my thesis in ITB :-)\n\n*\ndue to ITB rules", 
            "title": "About"
        }, 
        {
            "location": "/about/#author", 
            "text": "ryan hs  mr.ryansilalahi@gmail.com", 
            "title": "Author"
        }, 
        {
            "location": "/about/#get-thesis-document", 
            "text": "As this thesis is for my master degree in ITB, you can read my thesis in ITB :-) \n* due to ITB rules", 
            "title": "Get Thesis Document"
        }
    ]
}